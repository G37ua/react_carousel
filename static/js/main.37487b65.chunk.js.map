{"version":3,"sources":["components/Button/Button.tsx","components/CarouselItem/CarouselItem.tsx","components/Carousel/Carousel.tsx","components/img/Images.ts","components/CarouselSettings/CarouselSettings.tsx","App.tsx","index.tsx"],"names":["Button","label","onClick","disabled","dataCy","type","className","CarouselItem","images","animationDuration","frameSize","itemWidth","currentIndex","style","width","map","image","transform","transition","src","alt","Carousel","step","infinite","useState","setCurrentIndex","isPrevButtonDisabled","isNextButtonDisabled","length","Math","max","maxIndex","min","CarouselSettings","onItemWidthChange","onFrameSizeChange","onStepChange","onAnimationDurationChange","onInfiniteChange","value","onChange","checked","App","setItemWidth","setFrameSize","setStep","setAnimationDuration","setInfinite","e","parseInt","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37487b65.chunk.js","sourcesContent":["import './Button.scss';\n\ntype Props = {\n  label: string;\n  onClick: () => void;\n  disabled?: boolean;\n  'data-cy'?: string;\n};\n\nexport const Button: React.FC<Props> = ({\n  label,\n  onClick,\n  disabled = false,\n  'data-cy': dataCy,\n}) => {\n  return (\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={onClick}\n      disabled={disabled}\n      data-cy={dataCy}\n    >\n      {label}\n    </button>\n  );\n};\n","import React from 'react';\nimport './CarouselItem.scss';\n\ntype Props = {\n  images: string[];\n  animationDuration: number;\n  frameSize: number;\n  itemWidth: number,\n  currentIndex: number,\n};\n\nexport const CarouselItem: React.FC<Props> = ({\n  images,\n  animationDuration,\n  frameSize,\n  itemWidth,\n  currentIndex,\n}) => {\n  return (\n    <div\n      style={{\n        width: `${frameSize * itemWidth}px`,\n      }}\n      className=\"gallery\"\n    >\n      <ul className=\"gallery__list\">\n        {images.map((image) => (\n          <li\n            key={image}\n            style={{\n              transform: `translateX(${-currentIndex * itemWidth}px)`,\n              transition: `${animationDuration}ms`,\n            }}\n          >\n            <img\n              style={{ width: `${itemWidth}px` }}\n              src={`./img/${image}`}\n              alt={`Imagin-${image}`}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './Carousel.scss';\nimport { Button } from '../Button';\nimport { CarouselItem } from '../CarouselItem';\n\ntype CarouselProps = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nexport const Carousel: React.FC<CarouselProps> = ({\n  images,\n  step = 3,\n  frameSize = 3,\n  itemWidth = 130,\n  animationDuration = 1000,\n  infinite = false,\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const prevOnClick = () => {\n    if (currentIndex > 0) {\n      setCurrentIndex(Math.max(currentIndex - step, 0));\n    }\n  };\n\n  const nextOnClick = () => {\n    const maxIndex = images.length - frameSize;\n\n    if (currentIndex < maxIndex) {\n      setCurrentIndex(Math.min(currentIndex + step, maxIndex));\n    } else if (infinite) {\n      setCurrentIndex(0);\n    }\n  };\n\n  const isPrevButtonDisabled\n    = currentIndex === 0;\n  const isNextButtonDisabled\n    = currentIndex >= images.length - frameSize && !infinite;\n\n  return (\n    <div className=\"carousel\">\n      <h1 data-cy=\"title\" className=\"carousel__title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n      <CarouselItem\n        images={images}\n        itemWidth={itemWidth}\n        frameSize={frameSize}\n        currentIndex={currentIndex}\n        animationDuration={animationDuration}\n      />\n      <div className=\"carousel__buttons\">\n        <Button\n          label=\"<<\"\n          onClick={prevOnClick}\n          disabled={isPrevButtonDisabled}\n          data-cy=\"prev-button\"\n        />\n\n        <Button\n          label=\">>\"\n          onClick={nextOnClick}\n          disabled={isNextButtonDisabled}\n          data-cy=\"next-button\"\n        />\n      </div>\n    </div>\n  );\n};\n","export const images = [\n  '1.png',\n  '2.png',\n  '3.png',\n  '4.png',\n  '5.png',\n  '6.png',\n  '7.png',\n  '8.png',\n  '9.png',\n  '10.png',\n];\n","import React from 'react';\nimport './CarouselSettings.scss';\n\ntype CarouselSettingsProps = {\n  frameSize: number;\n  step: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  onItemWidthChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onFrameSizeChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onStepChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onAnimationDurationChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInfiniteChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const CarouselSettings: React.FC<CarouselSettingsProps> = ({\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n  onItemWidthChange,\n  onFrameSizeChange,\n  onStepChange,\n  onAnimationDurationChange,\n  onInfiniteChange,\n}) => {\n  return (\n    <div className=\"settings\">\n      <h2>Carousel Settings</h2>\n      <div className=\"grid\">\n        <label>\n          Item Width:\n          <input\n            type=\"number\"\n            min={100}\n            max={150}\n            value={itemWidth}\n            onChange={onItemWidthChange}\n          />\n        </label>\n        <label>\n          Frame Size:\n          <input\n            min={1}\n            max={4}\n            type=\"number\"\n            value={frameSize}\n            onChange={onFrameSizeChange}\n          />\n        </label>\n        <label>\n          Step:\n          <input\n            type=\"number\"\n            min={1}\n            max={4}\n            value={step}\n            onChange={onStepChange}\n          />\n        </label>\n        <label>\n          Animation Duration (ms):\n          <input\n            type=\"number\"\n            min={300}\n            max={1500}\n            value={animationDuration}\n            onChange={onAnimationDurationChange}\n          />\n        </label>\n        <label>\n          Infinite:\n          <input\n            type=\"checkbox\"\n            checked={infinite}\n            onChange={onInfiniteChange}\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\nimport { images } from './components/img/Images';\nimport { CarouselSettings } from './components/CarouselSettings';\n\nexport const App = () => {\n  const [itemWidth, setItemWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <CarouselSettings\n        itemWidth={itemWidth}\n        frameSize={frameSize}\n        step={step}\n        animationDuration={animationDuration}\n        infinite={infinite}\n        onItemWidthChange={(e) => setItemWidth(parseInt(e.target.value, 10))}\n        onFrameSizeChange={(e) => setFrameSize(parseInt(e.target.value, 10))}\n        onStepChange={(e) => setStep(parseInt(e.target.value, 10))}\n        onAnimationDurationChange={\n          (e) => setAnimationDuration(parseInt(e.target.value, 10))\n        }\n        onInfiniteChange={(e) => setInfinite(e.target.checked)}\n      />\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}